import telebot
import yt_dlp
import os
import time
import subprocess
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∞ –Ω–µ –≤ –∫–æ–¥–µ.
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8499873216:AAGuS3i9QbmcptkWmr-2L46CNtvTYSEMp1k')
if not BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ")

bot = telebot.TeleBot(BOT_TOKEN)

CHOICE_TEXT = {
    'best_video': 'üé¨ –í–∏–¥–µ–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)',
    'audio_only': 'üéß –ê—É–¥–∏–æ (MP3)',
    'low_quality': 'üìâ –í–∏–¥–µ–æ (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'
}

def get_progress_bar(percent, bar_length=20):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
    filled_length = int(bar_length * percent / 100)
    bar = "‚ñà" * filled_length + "‚îÄ" * (bar_length - filled_length)
    return f"[{bar}] {percent:.1f}%"

def download_media(url, output_template, choice, progress_hooks=None):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞."""
    ydl_opts = {
        'outtmpl': output_template,
        'http_headers': {'User-Agent': 'Mozilla/5.0'},
        'progress_hooks': progress_hooks if progress_hooks else [],
        'concurrent_fragments': 16,
        'force_ipv4': True,
    }

    is_social_media = 'tiktok.com' in url or 'instagram.com' in url

    if choice == 'audio_only':
        ydl_opts.update({
            'format': 'bestaudio/best',
        })
    elif choice == 'low_quality':
        ydl_opts.update({
            'format': 'bestvideo[height<=480]+bestaudio/best[height<=480]',
            'merge_output_format': 'mp4',
        })
    else: 
        format_selector = 'bestvideo*+bestaudio/best' if is_social_media else 'bestvideo+bestaudio/best'
        ydl_opts.update({
            'format': format_selector,
            'merge_output_format': 'mp4',
        })

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info_dict)
            return filename
    except yt_dlp.utils.DownloadError as e:
        print(f"–û—à–∏–±–∫–∞ yt-dlp –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
        return str(e)
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
        return str(e)

def get_file_size(file_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö, –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    try:
        file_size = os.path.getsize(file_path)
        return file_size / (1024 * 1024)  
    except FileNotFoundError:
        return None

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    bot.reply_to(message, """
–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ YouTube, TikTok –∏–ª–∏ Instagram, –∏ —è –µ–≥–æ —Å–∫–∞—á–∞—é –¥–ª—è —Ç–µ–±—è.
    """)

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    url = message.text
    if not (url.startswith('http://') or url.startswith('https://')):
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    if 'youtube.com' in url or 'youtu.be' in url:
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            InlineKeyboardButton(CHOICE_TEXT['best_video'], callback_data="best_video"),
            InlineKeyboardButton(CHOICE_TEXT['audio_only'], callback_data="audio_only"),
            InlineKeyboardButton(CHOICE_TEXT['low_quality'], callback_data="low_quality")
        )
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=markup)
    elif 'tiktok.com' in url or 'instagram.com' in url:
        status_message = bot.reply_to(message, "–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É... ‚è≥")
        process_social_media_download(status_message, message, url)
    else:
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ —Å YouTube, TikTok –∏ Instagram.")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    choice = call.data
    status_message = call.message
    original_message = status_message.reply_to_message

    if not original_message:
        bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.",
                              chat_id=status_message.chat.id, message_id=status_message.message_id, reply_markup=None)
        return

    url = original_message.text

    bot.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {CHOICE_TEXT.get(choice, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä')}.\n–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ... ‚è≥",
                          chat_id=status_message.chat.id,
                          message_id=status_message.message_id,
                          reply_markup=None)

    process_download(status_message, original_message, url, choice)

def create_progress_hook(bot_instance, status_message):
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è progress_hook —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    last_update = {'time': 0, 'text': ""}

    def progress_hook(d):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
        try:
            current_time = time.time()
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 2.5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if current_time - last_update['time'] < 2.5: 
                return

            if d['status'] == 'downloading':
                total_bytes = d.get('total_bytes') or d.get('total_bytes_estimate')
                
                percent_num = 0.0
                if total_bytes:
                    percent_num = (d.get('downloaded_bytes', 0) / total_bytes) * 100
                else:
                    percent_str = d.get('_percent_str', '0.0').replace('%', '').strip()
                    try:
                        percent_num = float(percent_str)
                    except (ValueError, TypeError):
                        percent_num = 0.0

                speed_str = d.get('_speed_str', 'N/A').strip()
                eta_str = d.get('_eta_str', 'N/A').strip()
                progress_bar = get_progress_bar(percent_num)

                progress_text = (
                    f"‚è≥ **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...**\n"
                    f"{progress_bar}\n"
                    f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {speed_str} | ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {eta_str}"
                )

                if progress_text != last_update['text']:
                    bot_instance.edit_message_text(
                        progress_text,
                        chat_id=status_message.chat.id,
                        message_id=status_message.message_id,
                        parse_mode='Markdown'
                    )
                    last_update['time'] = current_time
                    last_update['text'] = progress_text
        except telebot.apihelper.ApiTelegramException as e:
            if 'message is not modified' not in e.description:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        except Exception as e:
            print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ progress_hook: {e}")

    return progress_hook

def process_social_media_download(status_message, original_message, url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –¥–ª—è —Å—Å—ã–ª–æ–∫ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–∞ —Ñ–∞–π–ª–∞."""
    os.makedirs('downloads', exist_ok=True)
    video_path, audio_path = None, None

    try:
        video_template = f"downloads/{original_message.chat.id}_{original_message.message_id}_video.%(ext)s"
        
        hook = create_progress_hook(bot, status_message)
        video_path = download_media(url, video_template, 'best_video', progress_hooks=[hook])

        if not video_path or not os.path.exists(video_path):
            error_message = video_path if video_path else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
            bot.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–∏—á–∏–Ω–∞:\n`{error_message}`", chat_id=status_message.chat.id, message_id=status_message.message_id, parse_mode='Markdown')
            return

        bot.edit_message_text("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ. –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ... üéß", chat_id=status_message.chat.id, message_id=status_message.message_id)
        try:
            base_name = os.path.splitext(video_path)[0]
            audio_path = base_name + ".mp3"
            command = ['ffmpeg', '-i', video_path, '-vn', '-ab', '192k', '-preset', 'veryfast', '-y', audio_path]
            subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            if not os.path.exists(audio_path):
                audio_path = None
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ: {e}")
            audio_path = None

        has_sent_anything = False
        if get_file_size(video_path) <= 50:
            with open(video_path, 'rb') as f:
                bot.send_video(original_message.chat.id, f, caption="–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ", timeout=180)
            has_sent_anything = True
        else:
            bot.send_message(original_message.chat.id, "–í–∏–¥–µ–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (> 50 –ú–ë).")

        if audio_path and os.path.exists(audio_path) and get_file_size(audio_path) <= 50:
            with open(audio_path, 'rb') as f:
                bot.send_audio(original_message.chat.id, f, caption="–ê –≤–æ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ üéµ", timeout=180)
            has_sent_anything = True
        elif audio_path:
            bot.send_message(original_message.chat.id, "–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (> 50 –ú–ë).")

        if has_sent_anything:
            bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
        else:
            bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.", chat_id=status_message.chat.id, message_id=status_message.message_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ—Ü—Å–µ—Ç–∏: {e}")
        bot.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", chat_id=status_message.chat.id, message_id=status_message.message_id)
    finally:
        if video_path and os.path.exists(video_path):
            os.remove(video_path)
        if audio_path and os.path.exists(audio_path):
            os.remove(audio_path)

def process_download(status_message, original_message, url, choice):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞."""
    output_template = f"downloads/{original_message.chat.id}_{original_message.message_id}.%(ext)s"
    os.makedirs('downloads', exist_ok=True)

    hook = create_progress_hook(bot, status_message)
    media_path = download_media(url, output_template, choice, progress_hooks=[hook])

    if not media_path or not os.path.exists(media_path):
        error_message = media_path if media_path else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
        bot.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–∏—á–∏–Ω–∞:\n`{error_message}`", chat_id=status_message.chat.id, message_id=status_message.message_id, parse_mode='Markdown')
        return

    if choice == 'audio_only':
        bot.edit_message_text("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...", chat_id=status_message.chat.id, message_id=status_message.message_id)
        try:
            audio_path_mp3 = os.path.splitext(media_path)[0] + ".mp3"
            command = ['ffmpeg', '-i', media_path, '-vn', '-ab', '192k', '-preset', 'veryfast', '-y', audio_path_mp3]
            subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            os.remove(media_path) 
            media_path = audio_path_mp3  
        except Exception as e:
            bot.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3: {e}", chat_id=status_message.chat.id, message_id=status_message.message_id)
            if os.path.exists(media_path):
                os.remove(media_path)
            return

    bot.edit_message_text("–§–∞–π–ª –≥–æ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–º–µ—Ä...", chat_id=status_message.chat.id, message_id=status_message.message_id)

    file_size_mb = get_file_size(media_path)
    if file_size_mb is None:
            bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.", chat_id=status_message.chat.id, message_id=status_message.message_id)
            if os.path.exists(media_path):
                os.remove(media_path)
            return

    if file_size_mb > 50:
            bot.edit_message_text(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram ({file_size_mb:.2f} –ú–ë). –õ–∏–º–∏—Ç 50 –ú–ë.", chat_id=status_message.chat.id, message_id=status_message.message_id)
            os.remove(media_path)
            return

    bot.edit_message_text("üöÄ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ —á–∞—Ç...", chat_id=status_message.chat.id, message_id=status_message.message_id)

    send_function = bot.send_video if choice != 'audio_only' else bot.send_audio
    try:
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    with open(media_path, 'rb') as media_file:
                        send_function(original_message.chat.id, media_file, timeout=180)

                    bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
                    break  
                except ConnectionResetError as e:
                    print(f"ConnectionResetError (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                    if attempt + 1 < max_retries:
                        time.sleep(3)  
                    else:
                        bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.", chat_id=status_message.chat.id, message_id=status_message.message_id)
                except Exception as e:
                    print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                    bot.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", chat_id=status_message.chat.id, message_id=status_message.message_id)
                    break
    finally:
            if os.path.exists(media_path):
                os.remove(media_path)

if __name__ == '__main__':
    bot.infinity_polling()